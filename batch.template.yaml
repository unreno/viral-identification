AWSTemplateFormatVersion: "2010-09-09"


Description: Deploys a complete Batch environment


Parameters:
  CidrBlockPrefix:
    Type: String
    Default: 172.32
    # 172.31 exists by default so not changing
    #Default: 172.31


Resources:

  awsBatchServiceRole:
    Description: Service Role required by Compute Environment
    Type: AWS::IAM::Role
    Properties:
      RoleName: AWSBatchServiceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - batch.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole

#
# I think that these 2 service roles kinda create themselves.
#
#    awsServiceRoleForAutoScaling:
#      Description: Default Service-Linked Role enables access to AWS Services and Resources used or managed by Auto Scaling
#      Type: AWS::IAM::ServiceLinkedRole
#      Properties:
#        AWSServiceName: autoscaling.amazonaws.com
#
#    awsServiceRoleForECS:
#      Description: Role to enable Amazon ECS to manage your cluster.
#      Type: AWS::IAM::ServiceLinkedRole
#      Properties:
#        AWSServiceName: ecs.amazonaws.com
#
#  AWSServiceRoleForAutoScaling
#  Default Service-Linked Role enables access to AWS Services and Resources used or managed by Auto Scaling
#  AWS service: autoscaling (Service-Linked role)
#
#  AWSServiceRoleForEC2Spot
#  Default EC2 Spot Service Linked Role
#  AWS service: spot (Service-Linked role)
#
#  AWSServiceRoleForEC2SpotFleet
#  Default EC2 Spot Fleet Service Linked Role
#  AWS service: spotfleet (Service-Linked role)
#
#  AWSServiceRoleForECS
#  Role to enable Amazon ECS to manage your cluster.
#  AWS service: ecs (Service-Linked role)
#
#  AWSServiceRoleForSupport
#  Enables resource access for AWS to provide billing, administrative and support services
#  AWS service: support (Service-Linked role)
#
#  AWSServiceRoleForTrustedAdvisor
#  Allows Trusted Advisor to access AWS services on your behalf.
#  AWS service: trustedadvisor (Service-Linked role)
#

  batchJobRole:
    Description: Allows ECS tasks to call AWS services on your behalf.
    Type: AWS::IAM::Role
    Properties:
      RoleName: batchJobRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess


  # Used by Compute Environment
  ecsInstanceRole:
    Description: Allows EC2 instances to call AWS services on your behalf.
    Type: AWS::IAM::Role
    Properties:
      RoleName: ecsInstanceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  ecsInstanceProfile:
    DependsOn: ecsInstanceRole  #  IMPORTANT as cannot be created before it, maybe
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref ecsInstanceRole
      InstanceProfileName: !Ref ecsInstanceRole


  # Solely for compute environment bidding on SPOT instances
  spotFleetRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: spotFleetRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - spotfleet.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole
# not sure which policy is needed but the above works.
#      - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetRole

  batchVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Join [ ".", [ !Ref CidrBlockPrefix, "0.0/16" ] ]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: batchVPC

  PublicSubnet1:
    DependsOn: batchVPC
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref batchVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      CidrBlock: !Join [ ".", [ !Ref CidrBlockPrefix, "0.0/20" ] ]
      Tags:
        - Key: Name
          Value: batchSubnet1
  PublicSubnet2:
    DependsOn: batchVPC
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref batchVPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      MapPublicIpOnLaunch: true
      CidrBlock: !Join [ ".", [ !Ref CidrBlockPrefix, "16.0/20" ] ]
      Tags:
        - Key: Name
          Value: batchSubnet2
  PublicSubnet3:
    DependsOn: batchVPC
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref batchVPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      CidrBlock: !Join [ ".", [ !Ref CidrBlockPrefix, "32.0/20" ] ]
      Tags:
        - Key: Name
          Value: batchSubnet3
  PublicSubnet4:
    DependsOn: batchVPC
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref batchVPC
      AvailabilityZone: !Select [ 3, !GetAZs  '' ]
      MapPublicIpOnLaunch: true
      CidrBlock: !Join [ ".", [ !Ref CidrBlockPrefix, "48.0/20" ] ]
      Tags:
        - Key: Name
          Value: batchSubnet4
  PublicSubnet5:
    DependsOn: batchVPC
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref batchVPC
      AvailabilityZone: !Select [ 4, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      CidrBlock: !Join [ ".", [ !Ref CidrBlockPrefix, "64.0/20" ] ]
      Tags:
        - Key: Name
          Value: batchSubnet5
  PublicSubnet6:
    DependsOn: batchVPC
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref batchVPC
      AvailabilityZone: !Select [ 5, !GetAZs  '' ]
      MapPublicIpOnLaunch: true
      CidrBlock: !Join [ ".", [ !Ref CidrBlockPrefix, "80.0/20" ] ]
      Tags:
        - Key: Name
          Value: batchSubnet6

  batchInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: batchInternetGateway

  GatewayToInternet:
    DependsOn:
      - batchVPC
      - batchInternetGateway
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref batchVPC
      InternetGatewayId: !Ref batchInternetGateway

  batchRouteTable:
    DependsOn: batchVPC
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref batchVPC
      Tags:
        - Key: Name
          Value: batchRouteTable

  batchRoute:
    DependsOn:
      - batchRouteTable
      - batchInternetGateway
      - GatewayToInternet
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref batchRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref batchInternetGateway

  batchSubnetRouteTableAssociation1:
    DependsOn:
      - PublicSubnet1
      - batchRouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref batchRouteTable
  batchSubnetRouteTableAssociation2:
    DependsOn:
      - PublicSubnet2
      - batchRouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref batchRouteTable
  batchSubnetRouteTableAssociation3:
    DependsOn:
      - PublicSubnet3
      - batchRouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref batchRouteTable
  batchSubnetRouteTableAssociation4:
    DependsOn:
      - PublicSubnet4
      - batchRouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet4
      RouteTableId: !Ref batchRouteTable
  batchSubnetRouteTableAssociation5:
    DependsOn:
      - PublicSubnet5
      - batchRouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet5
      RouteTableId: !Ref batchRouteTable
  batchSubnetRouteTableAssociation6:
    DependsOn:
      - PublicSubnet6
      - batchRouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet6
      RouteTableId: !Ref batchRouteTable

  batchComputeEnvironmentSPOT50:
    DependsOn:
      - awsBatchServiceRole
      - spotFleetRole
      - ecsInstanceRole
      - ecsInstanceProfile
      - batchVPC
      - PublicSubnet1
      - PublicSubnet2
      - PublicSubnet3
      - PublicSubnet4
      - PublicSubnet5
      - PublicSubnet6
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ComputeEnvironmentName: ComputeEnvironmentSPOT50
      ServiceRole: !GetAtt awsBatchServiceRole.Arn
      State: ENABLED
      ComputeResources:
        Ec2KeyPair: batchKeyPair
#        Type: EC2
        Type: SPOT
        BidPercentage: 50
        # Pricing never seems to drop this low. Perhaps 33% at best.
        #BidPercentage: 25
        SpotIamFleetRole: !GetAtt spotFleetRole.Arn
        MinvCpus: 0
        MaxvCpus: 512
        # I'm expecting the source of geuvadis files to limit access. No problems with 40.
        #MaxvCpus: 40
        DesiredvCpus: 0
        SecurityGroupIds:
          - !GetAtt batchVPC.DefaultSecurityGroup
        Subnets:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          - !Ref PublicSubnet3
          - !Ref PublicSubnet4
          - !Ref PublicSubnet5
          - !Ref PublicSubnet6
        #InstanceRole: ecsInstanceRole
        #   text or Arn??? Trying Arn. I don't think that it matters. It is converted into an arn.
        #InstanceRole: !GetAtt ecsInstanceRole.Arn
        # Try the PROFILE ARN????
        # When a compute environment is created via the gui it is ...
        # arn:aws:iam::XXXXXXXXXXXXX:instance-profile/ecsInstanceRole
        # THIS IS REALLY FREAKING IMPORTANT
        # The PROFILE arn is needed here. Not the role arn. Not the role name.
        InstanceRole: !GetAtt ecsInstanceProfile.Arn
        InstanceTypes:
          - optimal
#          - m5
#          - c5

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-batch-computeenvironment-computeresources.html#cfn-batch-computeenvironment-computeresources-instancerole
# The Amazon ECS instance profile applied to Amazon EC2 instances in a compute environment. You can specify the short name or full Amazon Resource Name (ARN) of an instance profile. For example, ecsInstanceRole or arn:aws:iam::<aws_account_id>:instance-profile/ecsInstanceRole . For more information, see Amazon ECS Instance Role in the AWS Batch User Guide.
# When I used the short name, it did not use the profile arn. It used the role arn.
# Explicitly using the arn works fine though.


  # ComputeEnvironmentOrder
  #  The order in which compute environments are tried for job placement within a queue.
  #  Compute environments are tried in ascending order. For example, if two compute
  #  environments are associated with a job queue, the compute environment with a lower
  #  order integer value is tried for job placement first.
  #
  #  NOTE THAT THESE ARE REVERSE! (if I had multiple queues)
  #
  # Priority
  #  The priority of the job queue. Job queues with a higher priority (or a higher integer value
  #  for the priority parameter) are evaluated first when associated with the same compute
  #  environment. Priority is determined in descending order, for example, a job queue with a
  #  priority value of 10 is given scheduling preference over a job queue with a priority value of 1.



  # Sadly, SPOT instance bids don't cascade. Batch won't try one and then the other.
  # If your bid is too low, the spot request just errors and sits there.
  batchJobQueue:
    DependsOn:
      - batchComputeEnvironmentSPOT50
    Type: AWS::Batch::JobQueue
    Properties:
      ComputeEnvironmentOrder:
        - Order: 50
          ComputeEnvironment: ComputeEnvironmentSPOT50
      State: ENABLED
      Priority: 1
      JobQueueName: myJobQueue

  # I still don't get this, but you CANNOT DELETE job definitions. Ever.
  # They are just "deregistered" and "versioned".
  # Creating, deleting and creating will result in a second revision.
  # I'm a bit OCD, so this bugs the hell outta me for no practical reason.
  # 1800 works for some Unmapped/Diamond calls, but not most. Doubling and rebuilding.
  batchJobDefinition:
    DependsOn: batchJobRole
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      JobDefinitionName: myJobDefinition
      RetryStrategy:
        Attempts: 1
      ContainerProperties:
        JobRoleArn: !GetAtt batchJobRole.Arn
        Vcpus: 2
        Memory: 15000
        Image: !Join [ ".", [ !Ref "AWS::AccountId", "dkr.ecr", !Ref "AWS::Region", "amazonaws.com/viral_identification" ] ]
        #Vcpus: 1
        #Memory: 10000
        #Memory: 1800
        #Vcpus: 2
        #Memory: 3700

  ipv4SGBaseIngress:
    DependsOn: batchVPC
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt batchVPC.DefaultSecurityGroup
      IpProtocol: tcp
      CidrIp: 0.0.0.0/0
      FromPort: 22
      ToPort: 22
      IpProtocol: tcp

  ipv6SGBaseIngress:
    DependsOn: batchVPC
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt batchVPC.DefaultSecurityGroup
      IpProtocol: tcp
      CidrIpv6: ::/0
      FromPort: 22
      ToPort: 22
      IpProtocol: tcp

